services:
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_ENV: ${APP_ENV}
        PHP_VERSION: ${PHP_VERSION}
        INSTALL_XDEBUG: ${INSTALL_XDEBUG}
        INSTALL_PHPREDIS: ${INSTALL_PHPREDIS}
        INSTALL_COMPOSER: ${INSTALL_COMPOSER}
        NGINX_PHP_UPSTREAM_PORT: ${NGINX_PHP_UPSTREAM_PORT}
        FROM_PHP_INI_DIR: ${FROM_PHP_INI_DIR}
        TO_PHP_INI_DIR: ${TO_PHP_INI_DIR}
    container_name: ${COMPOSE_PROJECT_NAME}_app
    environment:
      DB_CONNECTION: mysql
      DB_HOST: ${COMPOSE_PROJECT_NAME}_mysql
      DB_PORT: 3306
      DB_DATABASE: ${MYSQL_DATABASE}
      DB_USERNAME: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      SESSION_DRIVER: redis
      CACHE_DRIVER: redis
      REDIS_HOST: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    tty: true
    working_dir: /var/www
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${FROM_PHP_INI_DIR}/php-${PHP_VERSION}-${APP_ENV}.ini:${TO_PHP_INI_DIR}/php.ini
    networks:
      - default
      - services

  #Nginx Service
  webserver:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}-webserver
    restart: unless-stopped
    tty: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./server/nginx/conf.d/:/etc/nginx/conf.d/
    depends_on:
      - app
    networks:
      - default
      - services

  db:
    image: mysql:latest
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - dbdata:/var/lib/mysql/

  #Redis Service
  redis:
    image: redis:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    tty: true
    volumes:
      - redisdata:/data
    networks:
      - default
      - services

#Docker Networks
networks:
  default:
    driver: bridge
  services:
    external: true

#Volumes
volumes:
  dbdata:
    driver: local
  redisdata:
    driver: local